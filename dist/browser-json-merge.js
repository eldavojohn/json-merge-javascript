function objectEquals(c,a,d){d=void 0===d?[]:d;return objectEqualsRecursive(c,a,d)}function mergeObject(c,a,d){d=void 0===d?[]:d;recursiveMerge(c,a,d)}
function objectEqualsRecursive(c,a,d){d=void 0===d?[]:d;d=[];if(c.constructor!=a.constructor||c&&!a||!a&&c)return!1;if(c==a)return!0;switch(c.constructor){case Object:if(c&&a){var e=Object.getOwnPropertyNames(c),b=Object.getOwnPropertyNames(a);if(e.length!=b.length)return!1;Object.getOwnPropertyNames(a).forEach(function(b){if(-1==d.indexOf(b)&&(-1==e.indexOf(b)||!objectEqualsRecursive(c[b],a[b],d)))return!1})}else if(a)return!1;break;case String:if(c&&a&&c!=a||a)return!1;break;case Array:if(c&&a)return arraysMatch(c,
a,d);if(a)return!1}return!0}function arraysMatch(c,a,d){d=void 0===d?[]:d;if(c.length!=a.length)return!1;var e;c.forEach(function(b){e=!1;for(i=0;i<a.length&&!e;i++)objectEqualsRecursive(b,a[i],d)&&(e=!0);if(!e)return!1});return!0}function arraysMerge(c,a,d){d=void 0===d?[]:d;var e,b=[];a.forEach(function(a){e=!1;for(i=0;i<c.length&&!e;i++)objectEqualsRecursive(a,c[i],d)&&(e=!0);e||b.push(a)});return c.concat(b)}
function recursiveMerge(c,a,d){d=void 0===d?[]:d;var e=Object.getOwnPropertyNames(c);Object.getOwnPropertyNames(a).forEach(function(b){if(-1!=e.indexOf(b)&&-1==d.indexOf(b)){var f=c[b],k=a[b],g=f.constructor,h;a[b]&&(h=k.constructor);switch(g){case Object:f&&a[b]?recursiveMerge(f,a[b],d):a[b]&&(c[b]=a[b]);break;case String:f&&a[b]&&g==h&&f!=a[b]?c[b]=f.concat(a[b]):a[b]&&(c[b]=a[b]);break;case Array:f&&a[b]&&g==h?c[b]=arraysMerge(f,a[b]):a[b]&&(c[b]=a[b]);break;case Number:f&&a[b]&&g==h?c[b]=f+a[b]:
a[b]&&(c[b]=a[b]);break;default:console.log("miss on value class "+g.toString())}}else c[b]=a[b]})}function newTruthiness(c){return 0==c?!0:c&&c.constructor==Array&&0==c.length?!1:c};
